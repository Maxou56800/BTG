#!/usr/bin/python
# -*- coding: utf-8 -*-
# This file is part of BTG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import json
import random
import urllib.parse

from BTG.lib.async_http import store_request
from BTG.lib.config_parser import Config
from BTG.lib.io import module as mod
from BTG.lib.io import colors

cfg = Config.get_instance()


class MalwareBazaar:
    def __init__(self, ioc, type, config, queues):
        self.config = config
        self.module_name = __name__.split(".")[-1]
        self.types = ["MD5", "SHA1", "SHA256"]
        self.search_method = "Online"
        self.description = "Search IOC in MalwareBazaar database"
        self.type = type
        self.ioc = ioc
        self.queues = queues
        self.verbose = "POST"
        self.proxy = self.config['proxy_host']
        self.verify = True
        self.headers = self.config["user_agent"]
        if self.type not in self.types:
            return None

        self.Search()

    def Search(self):
        mod.display(self.module_name, self.ioc, "INFO", "Search in MalwareBazaar...")
        self.headers["Accept"] = "application/json"
        url = "https://mb-api.abuse.ch/api/v1/"
        data = {
            "query": "get_info",
            "hash": self.ioc
        }
        request = {
            'url': url,
            'headers': self.headers,
            'data': data,
            'module': self.module_name,
            'ioc': self.ioc,
            'ioc_type': self.type,
            'verbose': self.verbose,
            'proxy': self.proxy,
            'verify': self.verify,
        }
        json_request = json.dumps(request)
        store_request(self.queues, json_request)

def research_finished(module, ioc, message=""):
    mod.display(module,
                    ioc,
                    "FINISHED")
    return

def response_handler(response_text, response_status, module, ioc, ioc_type, server_id):
    if response_status == 200:
        try:
            json_response = json.loads(response_text)
        except:
            mod.display(module,
                        ioc,
                        message_type="ERROR",
                        string="MalwareBazaar json_response was not readable.")
            research_finished(module, ioc)
            return None
        if json_response["query_status"] != "ok" or not len(json_response["data"]):
            mod.display(module,
                    ioc,
                    "NOT_FOUND",
                    "Sample not found in MalwareBazaar")
            research_finished(module, ioc)
            return None
        
        element_to_display = []
        if "signature" in json_response["data"][0] and json_response["data"][0]["signature"] and len(json_response["data"][0]["signature"]):
            element_to_display.append("Signature: {}".format(json_response["data"][0]["signature"]))
        if "tags" in json_response["data"][0] and json_response["data"][0]["tags"] and len(json_response["data"][0]["tags"]):
            element_to_display.append("Tags: {}".format(", ".join(json_response["data"][0]["tags"])))
        if "sha256_hash" in json_response["data"][0] and json_response["data"][0]["sha256_hash"] and len(json_response["data"][0]["sha256_hash"]):
            element_to_display.append("Details URL: https://bazaar.abuse.ch/sample/{}/".format(json_response["data"][0]["sha256_hash"]))
        mod.display(module,
                    ioc,
                    "FOUND",
                    " | ".join(element_to_display)             
        )
        research_finished(module, ioc)
        return None
    else:
        mod.display(module,
                    ioc,
                    message_type="ERROR",
                    string="MalwareBazaar connection status : %d" % (response_status))
        research_finished(module, ioc)
        return None